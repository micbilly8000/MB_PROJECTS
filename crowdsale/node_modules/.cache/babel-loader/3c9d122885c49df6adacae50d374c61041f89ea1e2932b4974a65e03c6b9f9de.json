{"ast":null,"code":"var _jsxFileName = \"/home/micbilly/code/crowdsale/src/components/Buy.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Buy = ({\n  provider,\n  price,\n  crowdsale,\n  setIsLoading\n}) => {\n  _s();\n  const [amount, setAmount] = useState('0');\n  const [isWaiting, setIsWaiting] = useState(false);\n  const buyHandler = async e => {\n    e.preventDefault();\n    setIsWaiting(true);\n    try {\n      const signer = await provider.getSigner();\n\n      // We need to calculate the required ETH in order to buy the tokens...\n      const value = ethers.utils.parseUnits((amount * price).toString(), 'ether');\n      const formattedAmount = ethers.utils.parseUnits(amount.toString(), 'ether');\n      const transaction = await crowdsale.connect(signer).buyTokens(formattedAmount, {\n        value: value\n      });\n      await transaction.wait();\n    } catch {\n      window.alert('User rejected or transaction reverted');\n    }\n    setIsLoading(true);\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: buyHandler,\n    style: {\n      maxWidth: '800px',\n      margin: '50px auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(Form.Group, {\n      as: Row,\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          placeholder: \"Enter amount\",\n          onChange: e => setAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"text-center\",\n        children: isWaiting ? /*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          style: {\n            width: '100%'\n          },\n          children: \"Buy Tokens\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Buy, \"QPPt9WH23eqc60KSb+Zsz4hK62k=\");\n_c = Buy;\nexport default Buy;\nvar _c;\n$RefreshReg$(_c, \"Buy\");","map":{"version":3,"names":["useState","Form","Button","Row","Col","Spinner","ethers","jsxDEV","_jsxDEV","Buy","provider","price","crowdsale","setIsLoading","_s","amount","setAmount","isWaiting","setIsWaiting","buyHandler","e","preventDefault","signer","getSigner","value","utils","parseUnits","toString","formattedAmount","transaction","connect","buyTokens","wait","window","alert","onSubmit","style","maxWidth","margin","children","Group","as","Control","type","placeholder","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","className","animation","variant","width","_c","$RefreshReg$"],"sources":["/home/micbilly/code/crowdsale/src/components/Buy.js"],"sourcesContent":["import { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { ethers } from 'ethers'\n\nconst Buy = ({ provider, price, crowdsale, setIsLoading }) => {\n    const [amount, setAmount] = useState('0')\n    const [isWaiting, setIsWaiting] = useState(false)\n\n    const buyHandler = async (e) => {\n        e.preventDefault()\n        setIsWaiting(true)\n\n        try {\n            const signer = await provider.getSigner()\n\n            // We need to calculate the required ETH in order to buy the tokens...\n            const value = ethers.utils.parseUnits((amount * price).toString(), 'ether')\n            const formattedAmount = ethers.utils.parseUnits(amount.toString(), 'ether')\n\n            const transaction = await crowdsale.connect(signer).buyTokens(formattedAmount, { value: value })\n            await transaction.wait()\n        } catch {\n            window.alert('User rejected or transaction reverted')\n        }\n\n        setIsLoading(true)\n    }\n\n    return (\n        <Form onSubmit={buyHandler} style={{ maxWidth: '800px', margin: '50px auto' }}>\n            <Form.Group as={Row}>\n                <Col>\n                    <Form.Control type=\"number\" placeholder=\"Enter amount\" onChange={(e) => setAmount(e.target.value)} />\n                </Col>\n                <Col className='text-center'>\n                    {isWaiting ? (\n                        <Spinner animation=\"border\" />\n                    ) : (\n                        <Button variant=\"primary\" type=\"submit\" style={{ width: '100%' }}>\n                            Buy Tokens\n                        </Button>\n                    )}\n                </Col>\n            </Form.Group>\n        </Form>\n    );\n}\n\nexport default Buy;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}